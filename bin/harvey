#!/usr/bin/env node

var _ = require('underscore');
var pkg = require('../package.json');
var async = require('async');
var commandLine = require('commander');
var reporterFactory = require('../lib/reporters/reporterFactory.js');
var Harvey = require('../index.js');
var harvey = new Harvey();
var SuiteImporter = require('../lib/suiteImporter.js');
var suiteImporter = new SuiteImporter();
var loadJson = require('../lib/util/loadJson.js');
var cliUtils = require('../lib/util/cli.js');
var options = getCommandLineArguments();
var timeout = cliUtils.parseTimeout(options.timeout);
var actions = cliUtils.parseActionPaths(options.actions);
var testSuiteFileNames = cliUtils.getTestSuiteFiles(options.args);
var testSuiteDatas, config;

try {
	testSuiteDatas = suiteImporter.import(testSuiteFileNames);
} catch(ex) {
	cliUtils.fail('Unable to import suite data from "' + ex.fileName + '" (' + ex.message + ')', options.debug);
}

try {
	config = (options.configFile) ? loadJson(options.configFile) : {};
} catch(ex) {
	cliUtils.fail(ex, options.debug);
}


var parallelTests = [];
var timeStarted = new Date();
var reporter = (options.reporter === 'none') ? null : reporterFactory.createReporter(options.reporter || 'console');

for(var i=0; i<actions.length; i++) {
	harvey.addCustomAction(actions[i].name, actions[i].location);
}

testSuiteDatas.forEach(function(testSuiteData) {
	if (options.testId) {
		var test = _.findWhere(testSuiteData.tests, { id: options.testId });
		testSuiteData.tests = (test) ? [test] : [];
	}
	parallelTests.push(function(cb) {
		harvey.run(testSuiteData, config, timeout, cb);
	});
});

if(options.proxyUrl) {
	config['_proxyUrl'] = options.proxyUrl;
}


async.parallel(parallelTests, function(error, results) {
	if (error) {
		cliUtils.fail(error, options.debug);
	}
	var totalTestsFailed = 0,
		totalTestsExecuted = 0,
		totalTestsSkipped = 0;
	results.forEach(function(result) {
		totalTestsFailed += result.testsFailed;
		totalTestsExecuted += result.testsExecuted;
		totalTestsSkipped += result.testsSkipped;
	});

	if (!reporter) {
		process.exit(totalTestsFailed);
	}
	var overallResults = {
		timeStarted: timeStarted,
		timeEnded: new Date(),
		testsExecuted: totalTestsExecuted,
		testsFailed: totalTestsFailed,
		testsSkipped: totalTestsSkipped,
		suiteResults: results
	};
	reporter.reportResults(overallResults, config, process.stdout, function(error) {
		process.exit(totalTestsFailed);
	});

});

function getCommandLineArguments() {

	commandLine
		.version(pkg.version)
		.usage('[options] <file ...>')
		.option('-d, --debug', 'Shows stack traces when errors are received')
		.option('-c, --config-file <path>', 'The path to the config file')
		.option('-r, --reporter <console|json|html|none>', 'Which reporter to use for displaying the results. Defaults to console.')
		.option('--test-id <testId>', 'The id of a single test to run')
		.option('--timeout <ms>', 'Connection and read timeout for requests')
		.option('--actions <actions>', 'A comma delimited list of paths to custom actions')
		.option('-p, --proxy-url <url>', 'Configure harvey to route all requests through the specified proxy')
		.parse(process.argv);

	return commandLine;
}
