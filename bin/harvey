#!/usr/bin/env node

var _ = require('underscore');
var path = require('path');
var pkg = require('../package.json');
var async = require('async');
var commandLine = require('commander');
var path = require('path');
var glob = require('glob');
var reporterFactory = require('../lib/reporters/reporterFactory.js');
var Harvey = require('../index.js');
var harvey = new Harvey();
var SuiteImporter = require('../lib/suiteImporter.js');
var suiteImporter = new SuiteImporter();
var color = require('cli-color');
var loadJson = require('../lib/util/loadJson.js');
var options = getCommandLineArguments();
var timeout = parseTimeout(options.timeout);
var actions = parseActionPaths(options.actions);
var testSuiteFileNames = getTestSuiteFiles(options.args);
var testSuiteDatas, config;

try {
	testSuiteDatas = suiteImporter.import(testSuiteFileNames);
} catch(ex) {
	fail("Unable to import suite data from '" + ex.fileName + "' (" + ex.message + ")");
}

try {
	config = (options.configFile) ? loadJson(options.configFile) : {};
} catch(ex) {
	fail(ex);
}


var parallelTests = [];
var timeStarted = new Date();
var reporter = (options.reporter === 'none') ? null : reporterFactory.createReporter(options.reporter || 'console');

for(var i=0; i<actions.length; i++) {
	harvey.addCustomAction(actions[i].name, actions[i].location);
}

testSuiteDatas.forEach(function(testSuiteData) {
	if (options.testId) {
		var test = _.findWhere(testSuiteData.tests, { id: options.testId });
		testSuiteData.tests = (test) ? [test] : [];
	}
	parallelTests.push(function(cb) {
		harvey.run(testSuiteData, config, timeout, cb);
	});
});

if(options.proxyUrl) {
	config['_proxyUrl'] = options.proxyUrl;
}


async.parallel(parallelTests, function(error, results) {
	if (error) {
		fail(error);
	}
	var totalTestsFailed = 0,
		totalTestsExecuted = 0,
		totalTestsSkipped = 0;
	results.forEach(function(result) {
		totalTestsFailed += result.testsFailed;
		totalTestsExecuted += result.testsExecuted;
		totalTestsSkipped += result.testsSkipped;
	});

	if (!reporter) {
		process.exit(totalTestsFailed);
	}
	var overallResults = {
		timeStarted: timeStarted,
		timeEnded: new Date(),
		testsExecuted: totalTestsExecuted,
		testsFailed: totalTestsFailed,
		testsSkipped: totalTestsSkipped,
		suiteResults: results
	};
	reporter.reportResults(overallResults, config, process.stdout, function(error) {
		process.exit(totalTestsFailed);
	});

});

function getCommandLineArguments() {

	commandLine
		.version(pkg.version)
		.usage('[options] <file ...>')
		.option('-d, --debug', 'Shows stack traces when errors are received')
		.option('-c, --config-file <path>', 'The path to the config file')
		.option('-r, --reporter <console|json|html|none>', 'Which reporter to use for displaying the results. Defaults to console.')
		.option('--test-id <testId>', 'The id of a single test to run')
		.option('--timeout <ms>', 'Connection and read timeout for requests')
		.option('--actions <actions>', 'A comma delimited list of paths to custom actions')
		.option('-p, --proxy-url <url>', 'Configure harvey to route all requests through the specified proxy')
		.parse(process.argv);

	return commandLine;
}

function getTestSuiteFiles(arguments) {

	if (!arguments.length) {
		fail("No test suite files were specified");
	}
	var fileNames = [];
	arguments.forEach(function(pattern) {
		glob.sync(pattern).forEach(function(file) {
			if (path.extname(file) !== '.json') {
				fail('Invalid test suite file "' + file + '". Test suites must be defined in a JSON file.');
			}
			fileNames.push(file);
		});
	});
	if (!fileNames.length) {
		fail("No test suite files found");
	}

	return fileNames;
}

function parseTimeout(timeoutString) {
	if(!timeoutString) {
		return undefined
	}

	var timeout = parseInt(timeoutString, 10);
	if(isNaN(timeout)) {
		fail('Invalid request timeout value "'+ timeoutString + '".');
	}

	return timeout
}

function parseActionPaths(actionPathsString) {
	var actions = [];
	actionPathsString = actionPathsString || "";

	var actionPaths = actionPathsString.split(',');

	for(var i=0; i<actionPaths.length; i++) {
		//The action path will either be in the for some/dir/sampleAction.js
		// or just sampleAction.js.  We need to parse the name, 'sample', out of it

		var path = actionPaths[i];
		var startingPos = path.lastIndexOf('/') + 1;

		name = path.substring(startingPos);
		name = name.replace('Action.js', '');

		if(name != "") {
			//Add the new action object to the array
			actions.push({
				"name": name,
				"location": path
			});
		}
		else {
			glob.sync(path + '/*Action.js').forEach(function(file) {
				startingPos = file.lastIndexOf('/') + 1;
				name = file.substring(startingPos);
				name = name.replace('Action.js', '');

				actions.push({
					"name": name,
					"location": file
				});
			});
		}
	}

	return actions;
}

function fail(error) {
	if (!(error instanceof Error)) {
		// give all error messages a stack trace for debug purposes
		error = new Error(error);
	}

	if (options.debug) {
		console.error(color.red(error.stack));
	}
	else {
		console.error(color.red(error.message));
	}
	process.exit(1);
}
